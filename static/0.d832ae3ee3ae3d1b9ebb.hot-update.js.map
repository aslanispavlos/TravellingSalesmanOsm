{"version":3,"file":"0.d832ae3ee3ae3d1b9ebb.hot-update.js","sources":["/Users/marc/git/uni/osm-fapra/react-client/src/js/services/core/middleware.js"],"sourcesContent":["import * as coreActions from \"./actions\"\nconst axios = require('axios')\n\nfunction addMarkerAtCurrentLocation(store) {\n\tstore.dispatch({\n\t\ttype: \"ADD_MARKER\",\n\t\tpayload: {\n\t\t\tlatlng: {\n\t\t\t\tlat: store.getState().core.position.latitude,\n\t\t\t\tlng: store.getState().core.position.longitude\n\t\t\t},\n\t\t\tmarkerType: \"normal\",\n\t\t\ttext: \"Your current location\"\n\t\t}\n\t})\n}\n\nfunction prepareDataTsp(targets, store) {\n\ttargets.forEach((elem, index) => {\n\t\tif (elem.mode === \"category\") {\n\t\t\telem.originLat = store.getState().core.position.latitude;\n\t\t\telem.originLon = store.getState().core.position.longitude;\n\t\t}\n\t});\n\treturn targets;\n}\n\nfunction processResult(res, action, store) {\n\taction.path = res.data.path.map((elem, id) => {\n\t\treturn [Number(elem.lat), Number(elem.lon)]\n\t});\n\tif (res.data.markers === \"\") return action;\n\tres.data.markers.forEach((elem, index) => {\n\t\tlet marker = {\n\t\t\tlatlng: {\n\t\t\t\tlat: elem.lat,\n\t\t\t\tlng: elem.lon\n\t\t\t},\n\t\t\ttags: elem.tags,\n\t\t\tname: elem.tags.name ? elem.tags.name : null\n\t\t}\n\t\tstore.dispatch({\n\t\t\ttype: \"ADD_MARKER\",\n\t\t\tpayload: marker\n\t\t})\n\t})\n\treturn action;\n}\n\nfunction processPoiResult(res, action, store) {\n\tif (res.data.markers === \"\"){\n\t\treturn action;\n\t}\n\tres.data.markers.forEach((elem, index) => {\n\t\tlet marker = {\n\t\t\tlatlng: {\n\t\t\t\tlat: elem.lat,\n\t\t\t\tlng: elem.lon\n\t\t\t},\n\t\t\ttags: elem.tags,\n\t\t\tname: elem.tags.name ? elem.tags.name : null\n\t\t}\n\t\tstore.dispatch({\n\t\t\ttype: \"ADD_MARKER\",\n\t\t\tpayload: marker\n\t\t})\n\t})\n\treturn action;\n}\n\nfunction getSecondsString(duration){\n    var output = \"\";\n    if (duration > 100000){\n        duration = duration/1000000;\n        output += duration.toFixed(4) + \" s\"\n    }else{\n        duration = duration/1000;\n        output += duration + \" ms\"\n    }\n    return output;\n}\n\n\nconst coreMiddleware = (function () {\n\treturn store => next => action => {\n\t\tswitch (action.type) {\n\t\t\tcase \"TSP_HELD_KARP\":\n\t\t\t\tif (!action.source || action.targets.length === 0){\n\t\t\t\t\t\tstore.dispatch(coreActions.createNotification({\n\t\t\t\t\t\t\ttitle: \"Error\",\n\t\t\t\t\t\t\tcontent: \"Please select source and targets\",\n\t\t\t\t\t\t\ttype: \"bad\"\n\t\t\t\t\t\t}))\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tlet targets = action.targets.slice();\n\t\t\t\ttargets.unshift(action.source);\n\t\t\t\ttargets = prepareDataTsp(targets, store);\n\n\t\t\t\taxios({\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\turl: '/tspheldkarp',\n\t\t\t\t\tdata: {\n\t\t\t\t\t\ttargets: targets\n\t\t\t\t\t}\n\t\t\t\t}).then(res => {\n\t\t\t\t\tstore.dispatch(coreActions.createNotification({\n\t\t\t\t\t\ttitle: \"Optimal\",\n\t\t\t\t\t\tsticky: true,\n\t\t\t\t\t\tappState: \"tsp\",\n\t\t\t\t\t\tcontent: '<h6 style=\"color:#44bd32\">Calculation Times:</h6></br>' +\n\t\t\t\t\t\t\t'Finding Nodes: ' + getSecondsString(res.data[\"duration:localization\"]) + '</br>' +\n\t\t\t\t\t\t\t'Dijkstra: ' + getSecondsString(res.data[\"duration:dijkstra\"]) + '</br>' +\n\t\t\t\t\t\t\t'TSP: ' + getSecondsString(res.data[\"duration:compute\"]) + '</br>' +\n                            'Costs: ' + res.data.costs\n\t\t\t\t\t}));\n\t\t\t\t\taction = processResult(res, action, store);\n\t\t\t\t\tnext(action)\n\t\t\t\t}).catch(err => {\n\t\t\t\t\tconsole.error(err)\n\t\t\t\t})\n\t\t\t\tbreak;\n\t\t\tcase \"APX\":\n\t\t\t\tif (!action.source || action.targets.length === 0){\n\t\t\t\t\t\tstore.dispatch(coreActions.createNotification({\n\t\t\t\t\t\t\ttitle: \"Error\",\n\t\t\t\t\t\t\tcontent: \"Please select source and targets\",\n\t\t\t\t\t\t\ttype: \"bad\"\n\t\t\t\t\t\t}))\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\ttargets = action.targets.slice();\n\t\t\t\ttargets.unshift(action.source);\n\t\t\t\ttargets = prepareDataTsp(targets, store)\n\t\t\t\taxios({\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\turl: '/apx',\n\t\t\t\t\tdata: {\n\t\t\t\t\t\ttargets: targets\n\t\t\t\t\t}\n\t\t\t\t}).then(res => {\n\t\t\t\t\tstore.dispatch(coreActions.createNotification({\n\t\t\t\t\t\ttitle: \"2-APX\",\n\t\t\t\t\t\tsticky: true,\n\t\t\t\t\t\tappState: \"tsp\",\n\t\t\t\t\t\tcontent: '<h6 style=\"color:#44bd32\">Calculation Times:</h6></br>' +\n\t\t\t\t\t\t\t'Finding Nodes: ' + getSecondsString(res.data[\"duration:localization\"]) + '</br>' +\n\t\t\t\t\t\t\t'Dijkstra: ' + getSecondsString(res.data[\"duration:dijkstra\"]) + '</br>' +\n\t\t\t\t\t\t\t'TSP: ' + getSecondsString(res.data[\"duration:compute\"]) + '</br>' +\n                            'Costs before swap: ' + res.data.costsBefore +'</br>' +\n                            'Costs after swap: ' + res.data.costs\n\t\t\t\t\t}));\n\t\t\t\t\taction = processResult(res, action, store);\n\t\t\t\t\tnext(action)\n\t\t\t\t}).catch(err => {\n\t\t\t\t\tconsole.error(err)\n\t\t\t\t})\n\t\t\t\tbreak;\n\t\t\tcase \"POI\":\n\t\t\t\tif (action.targets.length === 0){\n\t\t\t\t\t\tstore.dispatch(coreActions.createNotification({\n\t\t\t\t\t\t\ttitle: \"Error\",\n\t\t\t\t\t\t\tcontent: \"Please select categories to search for\",\n\t\t\t\t\t\t\ttype: \"bad\"\n\t\t\t\t\t\t}))\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\ttargets = action.targets.slice();\n\t\t\t\ttargets = prepareDataTsp(targets, store)\n\t\t\t\taxios({\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\turl: '/poi',\n\t\t\t\t\tdata: {\n\t\t\t\t\t\ttargets: targets\n\t\t\t\t\t}\n\t\t\t\t}).then(res => {\n\t\t\t\t\tif (res.data.markers === \"\"){\n\t\t\t\t\t\tstore.dispatch(coreActions.createNotification({\n\t\t\t\t\t\t\ttitle: \"Error\",\n\t\t\t\t\t\t\tcontent: \"Could not find any matching POI\",\n\t\t\t\t\t\t\ttype: \"bad\"\n\t\t\t\t\t\t}))\n\t\t\t\t\t}else {\n\t\t\t\t\t\tstore.dispatch(coreActions.createNotification({\n\t\t\t\t\t\t\ttitle: \"POI\",\n\t\t\t\t\t\t\tsticky: true,\n\t\t\t\t\t\t\tappState: \"poi\",\n\t\t\t\t\t\t\tcontent: '<h6 style=\"color:#44bd32\">Calculation Times:</h6></br>' +\n\t\t\t\t\t\t\t\t'Finding Nodes: ' + getSecondsString(res.data[\"duration:localization\"])\n\t\t\t\t\t\t}));\n\t\t\t\t\t}\n\t\t\t\t\taction = processPoiResult(res, action, store);\n\t\t\t\t\tnext(action)\n\t\t\t\t}).catch(err => {\n\t\t\t\t\tconsole.error(err)\n\t\t\t\t})\n\t\t\t\tbreak;\n\n\n\t\t\tcase \"CALC_ROUTE\":\n\t\t\t\tif (!action.source || !action.target){\n\t\t\t\t\t\tstore.dispatch(coreActions.createNotification({\n\t\t\t\t\t\t\ttitle: \"Error\",\n\t\t\t\t\t\t\tcontent: \"Please select source and target\",\n\t\t\t\t\t\t\ttype: \"bad\"\n\t\t\t\t\t\t}))\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\taction.data = {}\n\t\t\t\taction.data.sourceMode = action.source.mode;\n\t\t\t\taction.data.targetMode = action.target.mode;\n\t\t\t\tif (action.source.mode === \"category\") {\n\t\t\t\t\taction.data.sourceOriginLat = store.getState().core.position.latitude;\n\t\t\t\t\taction.data.sourceOriginLon = store.getState().core.position.longitude;\n\t\t\t\t\taction.data.sourceGroup = action.source.group;\n\t\t\t\t\taction.data.sourceCat = action.source.category;\n\t\t\t\t} else {\n\t\t\t\t\taction.data.sourceLat = action.source.latlng.lat;\n\t\t\t\t\taction.data.sourceLon = action.source.latlng.lng;\n\t\t\t\t}\n\t\t\t\tif (action.target.mode === \"category\") {\n\t\t\t\t\taction.data.targetOriginLat = store.getState().core.position.latitude;\n\t\t\t\t\taction.data.targetOriginLon = store.getState().core.position.longitude;\n\t\t\t\t\taction.data.targetGroup = action.target.group;\n\t\t\t\t\taction.data.targetCat = action.target.category;\n\t\t\t\t} else {\n\t\t\t\t\taction.data.targetLat = action.target.latlng.lat;\n\t\t\t\t\taction.data.targetLon = action.target.latlng.lng;\n\t\t\t\t}\n\t\t\t\taxios({\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\turl: '/routebycoordinates',\n\t\t\t\t\tdata: action.data\n\t\t\t\t}).then(res => {\n\t\t\t\t\tstore.dispatch(coreActions.createNotification({\n\t\t\t\t\t\ttitle: \"Dijkstra\",\n\t\t\t\t\t\tsticky: true,\n\t\t\t\t\t\tappState: \"routing\",\n\t\t\t\t\t\tcontent: '<h6 style=\"color:#44bd32\">Calculation Times:</h6></br>' +\n\t\t\t\t\t\t\t'Finding Nodes: ' + getSecondsString(res.data[\"duration:localization\"]) + '</br>' +\n\t\t\t\t\t\t\t'Dijkstra: ' + getSecondsString(res.data[\"duration:dijkstra\"]) + '</br>' +\n                            'Costs: ' + res.data.costs\n\t\t\t\t\t}));\n\t\t\t\t\taction = processResult(res, action, store)\n\t\t\t\t\tnext(action);\n\t\t\t\t}).catch(err => {\n\t\t\t\t\tconsole.error(err)\n\t\t\t\t})\n\t\t\t\tbreak;\n\t\t\tcase \"GET_CATEGORIES\":\n\t\t\t\taxios({\n\t\t\t\t\tmethod: 'GET',\n\t\t\t\t\turl: '/categories'\n\t\t\t\t}).then(res => {\n\t\t\t\t\taction.categories = [];\n\t\t\t\t\tfor (let key in res.data) {\n\t\t\t\t\t\tlet obj = {\n\t\t\t\t\t\t\ttype: 'group',\n\t\t\t\t\t\t\tname: key,\n\t\t\t\t\t\t\titems: []\n\t\t\t\t\t\t};\n\t\t\t\t\t\tfor (let item of res.data[key]) {\n\t\t\t\t\t\t\tobj.items.push({\n\t\t\t\t\t\t\t\tvalue: key + \":\" + item,\n\t\t\t\t\t\t\t\tlabel: item,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\taction.categories.push(obj);\n\t\t\t\t\t}\n\t\t\t\t\tnext(action);\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase \"GET_CURRENT_GEOLOCATION\":\n\t\t\t\tnavigator.geolocation.getCurrentPosition(position => {\n\t\t\t\t\taction.position = position;\n\t\t\t\t\tnext(action);\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase \"ADD_MARKER\":\n\t\t\t\t\n\t\t\t\taction.exists = false;\n\t\t\t\tfor (let marker of store.getState().core.markers) {\n\t\t\t\t\tif (marker.latlng.lat === action.payload.latlng.lat && marker.latlng.lng === action.payload.latlng.lng) {\n\t\t\t\t\t\taction.exists = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!action.payload.tags) action.payload.tags = {}\n\n\t\t\t\tif (!action.exists) {\n\t\t\t\t\t// apparently the wikilocation api does not exist anymore\n\t\t\t\t\t//store.dispatch(coreActions.getMarkerDescription(store.getState().core.markers.length, action.payload.latlng.lat, action.payload.latlng.lng))\n\t\t\t\t\tnext(action);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"DELETE_MARKER\":\n\t\t\t\tnext(action)\n\t\t\t\tbreak;\n\t\t\tcase \"SET_APP_STATE\":\n\t\t\t\tnext(action)\n\t\t\t\tbreak;\n\t\t\tcase \"SET_TSP_SOURCE_CATEGORY\":\n\t\t\t\tnext(action)\n\t\t\t\tbreak;\n\t\t\tcase \"SET_TSP_SOURCE_CURRENT\":\n\t\t\t\taddMarkerAtCurrentLocation(store);\n\t\t\t\tnext(action)\n\t\t\t\tbreak;\n\t\t\tcase \"DELETE_TSP_SOURCE\":\n\t\t\t\tnext(action);\n\t\t\t\tbreak;\n\t\t\tcase \"CHANGE_CATEGORY_TSP_SOURCE\":\n\t\t\t\taction.group = action.payload.value.split(':')[0];\n\t\t\t\taction.category = action.payload.value.split(':')[1];\n\t\t\t\tnext(action)\n\t\t\t\tbreak;\n\t\t\tcase \"CHANGE_NUMBER_OF_ELEM_TSP\":\n\t\t\t\tnext(action)\n\t\t\t\tbreak;\n\t\t\tcase \"CHANGE_NUMBER_OF_ELEM_POI\":\n\t\t\t\tnext(action)\n\t\t\t\tbreak;\n\t\t\tcase \"ADD_CATEGORY_TSP_TARGET\":\n\t\t\t\tnext(action)\n\t\t\t\tbreak;\n\t\t\tcase \"ADD_CATEGORY_POI_TARGET\":\n\t\t\t\tnext(action)\n\t\t\t\tbreak;\n\t\t\tcase \"ADD_CURRENT_TSP_TARGET\":\n\t\t\t\taddMarkerAtCurrentLocation(store);\n\t\t\t\tnext(action)\n\t\t\t\tbreak;\n\t\t\tcase \"CHANGE_CATEGORY_TSP_TARGET\":\n\t\t\t\taction.group = action.payload.value.split(':')[0];\n\t\t\t\taction.category = action.payload.value.split(':')[1];\n\t\t\t\tnext(action)\n\t\t\t\tbreak;\n\t\t\tcase \"DELETE_TSP_TARGET\":\n\t\t\t\tnext(action);\n\t\t\t\tbreak;\n\t\t\tcase \"DELETE_POI_TARGET\":\n\t\t\t\tnext(action);\n\t\t\t\tbreak;\n\t\t\tcase \"ADD_TSP_MARKER_TARGET\":\n\t\t\t\tnext(action)\n\t\t\t\tbreak;\n\t\t\tcase \"SET_TSP_MARKER_SOURCE\":\n\t\t\t\tnext(action);\n\t\t\t\tbreak;\n\n\t\t\t\t/** Routing stuff**/\n\t\t\tcase \"SET_ROUTING_SOURCE_MARKER\":\n\t\t\t\tnext(action)\n\t\t\t\tbreak;\n\t\t\tcase \"SET_ROUTING_SOURCE_CATEGORY\":\n\t\t\t\tnext(action)\n\t\t\t\tbreak;\n\t\t\tcase \"SET_ROUTING_TARGET_MARKER\":\n\t\t\t\tnext(action)\n\t\t\t\tbreak;\n\t\t\tcase \"SET_ROUTING_TARGET_CATEGORY\":\n\t\t\t\tnext(action)\n\t\t\t\tbreak;\n\t\t\tcase \"CHANGE_CATEGORY_ROUTING_SOURCE\":\n\t\t\t\taction.group = action.payload.value.split(':')[0];\n\t\t\t\taction.category = action.payload.value.split(':')[1];\n\t\t\t\tnext(action)\n\t\t\t\tbreak;\n\t\t\tcase \"CHANGE_CATEGORY_ROUTING_TARGET\":\n\t\t\t\taction.group = action.payload.value.split(':')[0];\n\t\t\t\taction.category = action.payload.value.split(':')[1];\n\t\t\t\tnext(action)\n\t\t\t\tbreak;\n\t\t\tcase \"CHANGE_CATEGORY_POI_TARGET\":\n\t\t\t\taction.group = action.payload.value.split(':')[0];\n\t\t\t\taction.category = action.payload.value.split(':')[1];\n\t\t\t\tnext(action)\n\t\t\t\tbreak;\n\t\t\tcase \"DELETE_ROUTING_SOURCE\":\n\t\t\t\tnext(action);\n\t\t\t\tbreak;\n\t\t\tcase \"DELETE_ROUTING_TARGET\":\n\t\t\t\tnext(action);\n\t\t\t\tbreak;\n\t\t\tcase \"SET_ROUTING_SOURCE_CURRENT\":\n\t\t\t\taddMarkerAtCurrentLocation(store);\n\t\t\t\tnext(action);\n\t\t\t\tbreak\n\t\t\tcase \"CLEAR_TSP\":\n\t\t\t\tnext(action);\n\t\t\t\tbreak\n\t\t\tcase \"CLEAR_ROUTING\":\n\t\t\t\tnext(action);\n\t\t\t\tbreak\n\t\t\tcase \"CLEAR_APX\":\n\t\t\t\tnext(action);\n\t\t\t\tbreak\n\t\t\tcase \"SET_ROUTING_TARGET_CURRENT\":\n\t\t\t\taddMarkerAtCurrentLocation(store);\n\t\t\t\tnext(action);\n\t\t\t\tbreak\n\n\t\t\tcase 'CREATE_NOTIFICATION':\n\n\t\t\t\t// start a timeout to close this notification\n\t\t\t\tfor (let note in store.getState().core.notifications){\n\t\t\t\t\tif (store.getState().core.notifications[note].title === action.notification.title){\n\t\t\t\t\t\tstore.dispatch(coreActions.removeNotification(note));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!action.notification.sticky) {\n\t\t\t\t\tvar timeout = setTimeout(\n\t\t\t\t\t\tfunction () {\n\t\t\t\t\t\t\tstore.dispatch(coreActions.removeNotification(action.notification.key))\n\t\t\t\t\t\t},\n\t\t\t\t\t\taction.notification.duration * 1000\n\t\t\t\t\t)\n\t\t\t\t}\n\n\t\t\t\tnext(action);\n\t\t\t\tbreak;\n\n\t\t\tcase 'CLOSE_NOTIFICATION':\n\t\t\t\tvar notifications = Object.assign({}, store.getState().core.notifications);\n\n\t\t\t\t// start a timeout to remove this notification\n\t\t\t\t// This gives us time to animate out the notification before we remove the data\n\t\t\t\tvar timeout = setTimeout(\n\t\t\t\t\tfunction () {\n\t\t\t\t\t\tstore.dispatch(coreActions.removeNotification(action.key))\n\t\t\t\t\t},\n\t\t\t\t\t500\n\t\t\t\t)\n\n\t\t\t\tnext(action);\n\t\t\t\tbreak;\n\n\t\t\tcase 'REMOVE_NOTIFICATION':\n\n\t\t\t\t// Manual removal\n\t\t\t\tif (action.manual) {\n\t\t\t\t\tvar notifications = Object.assign({}, store.getState().core.notifications);\n\n\t\t\t\t\t// If a broadcast, add to suppressed_broadcasts\n\t\t\t\t\tif (notifications[action.key] && notifications[action.key].type === 'broadcast') {\n\t\t\t\t\t\tstore.dispatch({\n\t\t\t\t\t\t\ttype: 'SUPPRESS_BROADCAST',\n\t\t\t\t\t\t\tkey: action.key\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tnext(action);\n\t\t\t\tbreak;\n\t\t\tcase \"CLEAR_MARKERS\":\n\t\t\t\tnext(action);\n\t\t\tbreak;\n\t\t\tcase \"GET_MARKER_DESCRIPTION\":\n\t\t\t\taxios({\n\t\t\t\t\tmethod: \"get\",\n\t\t\t\t\turl: \"http://api.wikilocation.org/articles?lat=\" + action.lat + \"&lng=\" + action.lng +\"&limit=1&radius=50\",\n\t\t\t\t}).then(res=> {\n\t\t\t\t\tnext(action);\n\t\t\t\t}).catch(err => {\n\t\t\t\t\tconsole.error(err)\n\t\t\t\t})\n\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t}\n})();\n\nexport default coreMiddleware;\n\n\n\n// WEBPACK FOOTER //\n// src/js/services/core/middleware.js"],"mappings":";;;;;;;;;;;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AANA;AAFA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AANA;AAQA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AANA;AAQA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAHA;AAOA;AACA;AACA;AACA;AACA;AAJA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAHA;AAOA;AACA;AACA;AACA;AACA;AAJA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAHA;AAOA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAJA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAHA;AADA;AAAA;AAAA;AACA;AADA;AAMA;AAAA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AA9XA;AAgYA;AAjYA;AAAA;AAkYA;AACA;AACA;;;;A","sourceRoot":""}